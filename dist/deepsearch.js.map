{"version":3,"sources":["../src/deepsearch.js"],"names":["deepsearch","tree","recurse","callback","node","type","Object","prototype","toString","call","isArr","isObj","iterable","keys","result","key","next","hasOwnProperty","found"],"mappings":";;;;;kBAAwBA,U;AAAT,SAASA,UAAT,CAAoBC,IAApB,EAA0B;;AAEvC,SAAO,SAASC,OAAT,CAAiBC,QAAjB,EAAwC;AAAA,QAAbC,IAAa,uEAANH,IAAM;;AAC7C,QAAMI,OAAOC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,IAA/B,CAAb;AACA,QAAMM,QAAQL,SAAS,gBAAvB;AACA,QAAMM,QAAQN,SAAS,iBAAvB;AACA,QAAMO,WAAWF,QAAQN,IAAR,GAAeE,OAAOO,IAAP,CAAYT,IAAZ,CAAhC;AACA,QAAMU,SAASX,SAASC,IAAT,CAAf;AACA,QAAIU,MAAJ,EACE,OAAOA,MAAP,CADF,KAEK,IAAI,CAACJ,KAAD,IAAU,CAACC,KAAf,EACH,OAAOG,MAAP;AAT2C;AAAA;AAAA;;AAAA;AAU7C,2BAAkBF,QAAlB,8HAA4B;AAAA,YAAjBG,GAAiB;;AAC1B,YAAMC,OAAOZ,KAAKa,cAAL,CAAoBF,GAApB,IAA2BX,KAAKW,GAAL,CAA3B,GAAuCA,GAApD;AACA,YAAMG,QAAQhB,QAAQC,QAAR,EAAkBa,QAAQ,EAA1B,CAAd;AACA,YAAIE,KAAJ,EACE,OAAOA,KAAP;AACH;AAf4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB9C,GAhBD;AAkBD","file":"deepsearch.js","sourcesContent":["export default function deepsearch(tree) {\r\n\r\n  return function recurse(callback, node = tree) {\r\n    const type = Object.prototype.toString.call(node)\r\n    const isArr = type === '[object Array]'\r\n    const isObj = type === '[object Object]'\r\n    const iterable = isArr ? node : Object.keys(node)\r\n    const result = callback(node)\r\n    if (result)\r\n      return result\r\n    else if (!isArr && !isObj)\r\n      return result\r\n    for (const key of iterable) {\r\n      const next = node.hasOwnProperty(key) ? node[key] : key\r\n      const found = recurse(callback, next || {})\r\n      if (found)\r\n        return found\r\n    }\r\n  }\r\n\r\n}\r\n"]}